INF = float('inf')

def floyd_warshall(graph):
    num_vertices = len(graph)
    dist = [[0] * num_vertices for _ in range(num_vertices)]

    # Initialize the distance matrix with the input graph
    for i in range(num_vertices):
        for j in range(num_vertices):
            dist[i][j] = graph[i][j]

    # Apply Floyd's Algorithm
    for k in range(num_vertices):
        for i in range(num_vertices):
            for j in range(num_vertices):
                if dist[i][k] != INF and dist[k][j] != INF and dist[i][k] + dist[k][j] < dist[i][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

    return dist

def print_solution(dist):
    num_vertices = len(dist)
    print("Shortest distances between all pairs of vertices:")
    for i in range(num_vertices):
        for j in range(num_vertices):
            if dist[i][j] == INF:
                print("INF", end="\t")
            else:
                print(dist[i][j], end="\t")
        print()

# Example graph represented as an adjacency matrix
graph = [
    [0, 3, INF, 5],
    [2, 0, INF, 4],
    [INF, 1, 0, INF],
    [INF, INF, 2, 0]
]

result = floyd_warshall(graph)
print_solution(result)
